generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  email      String   @unique
  hash       String
  role       Role     @default(USER)
  phone      Int?
  first_name String?
  last_name  String?
  expert     Expert?
  profile    Profile?

  @@map("users")
}

model Expert {
  id                Int                        @id @default(autoincrement())
  user_id           Int                        @unique
  user_contact      UserContacts?
  user_favorites    UserFavorites?
  basic             BasicProfile?
  categories_degree CategoriesDegreeOnExperts?
  categories        CategoriesOnExperts?
  degrees           Degree[]
  social_networks   ExpertSocialNetwork?
  user              User                       @relation(fields: [user_id], references: [id])
  languages         Language[]
  location          Location?
  portfolio         Portfolio?
  services          Service[]

  @@map("experts")
}

model Profile {
  id               Int            @id @default(autoincrement())
  user_id          Int            @unique
  expert_contact   UserContacts?
  expert_favorites UserFavorites?
  user             User           @relation(fields: [user_id], references: [id])

  @@map("profiles")
}

model BasicProfile {
  id          Int     @id @default(autoincrement())
  name        String?
  description String?
  status      String?
  id_status   String?
  bgPhoto     String?
  picture     String?
  exp_id      Int     @unique
  expert      Expert  @relation(fields: [exp_id], references: [id])

  @@map("basic_profiles")
}

model Degree {
  id              Int      @id @default(autoincrement())
  field           String
  academic_degree String
  start           DateTime
  end             String
  school          String
  exp_id          Int
  expert          Expert   @relation(fields: [exp_id], references: [id])

  @@map("degrees")
}

model Service {
  id          Int    @id @default(autoincrement())
  title       String
  price       Int
  description String
  exp_id      Int
  expert      Expert @relation(fields: [exp_id], references: [id])

  @@map("services")
}

model Language {
  id             Int    @id @default(autoincrement())
  language       String
  id_language    String
  proficiency    String
  id_proficiency String
  exp_id         Int
  expert         Expert @relation(fields: [exp_id], references: [id])

  @@map("languages")
}

model Location {
  id          Int    @id @default(autoincrement())
  location    String
  coordinates String
  exp_id      Int    @unique
  expert      Expert @relation(fields: [exp_id], references: [id])

  @@map("locations")
}

model Portfolio {
  id     Int    @id @default(autoincrement())
  image  String
  cite   String
  exp_id Int    @unique
  expert Expert @relation(fields: [exp_id], references: [id])

  @@map("portfolios")
}

model ExpertSocialNetwork {
  id     Int    @id @default(autoincrement())
  name   String
  exp_id Int    @unique
  expert Expert @relation(fields: [exp_id], references: [id])

  @@map("expert_social_networks")
}

model UserFavorites {
  profile_id Int      @unique
  exp_id     Int      @unique
  assignedAt DateTime @default(now())
  expert     Expert   @relation(fields: [exp_id], references: [id])
  profile    Profile  @relation(fields: [profile_id], references: [id])

  @@id([profile_id, exp_id])
}

model UserContacts {
  profile_id Int      @unique
  exp_id     Int      @unique
  assignedAt DateTime @default(now())
  expert     Expert   @relation(fields: [exp_id], references: [id])
  profile    Profile  @relation(fields: [profile_id], references: [id])

  @@id([profile_id, exp_id])
}

model Category {
  id     Int                  @id @default(autoincrement())
  name   String
  expert CategoriesOnExperts?

  @@map("categories")
}

model CategoriesOnExperts {
  category_id Int      @unique
  exp_id      Int      @unique
  assignedAt  DateTime @default(now())
  category    Category @relation(fields: [category_id], references: [id])
  expert      Expert   @relation(fields: [exp_id], references: [id])

  @@id([category_id, exp_id])
  @@map("categories_on_experts")
}

model CategoryDegrees {
  id     Int                        @id @default(autoincrement())
  name   String
  expert CategoriesDegreeOnExperts?

  @@map("categories_degree")
}

model CategoriesDegreeOnExperts {
  category_id Int             @unique
  exp_id      Int             @unique
  assignedAt  DateTime        @default(now())
  category    CategoryDegrees @relation(fields: [category_id], references: [id])
  expert      Expert          @relation(fields: [exp_id], references: [id])

  @@id([category_id, exp_id])
  @@map("categories_degree_on_experts")
}

model SocialNetwork {
  id   Int    @id @default(autoincrement())
  name String

  @@map("social_networks")
}

enum Role {
  USER
  EXPERT
  ADMIN
}
