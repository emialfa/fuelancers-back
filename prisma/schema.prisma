generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  email      String   @unique
  hash       String
  role       Role     @default(USER)
  phone      Int?
  first_name String?
  last_name  String?
  expert     Expert?
  profile    Profile?

  @@map("users")
}

model Expert {
  id                Int                        @id @default(autoincrement())
  user_id           Int                        @unique
  user_contact      UserContacts?
  user_favorites    UserFavorites?
  personal_info     ExpertPersonalInfo?
  categories_degree CategoriesDegreeOnExperts?
  degrees           ExpertDegree[]
  social_networks   ExpertSocialNetwork?
  user              User                       @relation(fields: [user_id], references: [id])
  languages         ExpertLanguage[]
  location          ExpertLocation?
  portfolio         ExpertPortfolio?
  services          ExpertService[]
  experience        ExperienceOnExperts?
  skills            SkillsOnExperts[]
  status            StatusOnExperts?

  work_mode WorkModeOnExperts?

  @@map("experts")
}

model Profile {
  id               Int            @id @default(autoincrement())
  user_id          Int            @unique
  expert_contact   UserContacts?
  expert_favorites UserFavorites?
  user             User           @relation(fields: [user_id], references: [id])

  @@map("profiles")
}

model ExpertPersonalInfo {
  id          Int     @id @default(autoincrement())
  description String?
  title       String?
  bg_photo    String?
  picture     String?
  exp_id      Int     @unique
  expert      Expert  @relation(fields: [exp_id], references: [id])

  @@map("expert_personal_info")
}

model ExpertDegree {
  id              Int      @id @default(autoincrement())
  field           String
  academic_degree String
  start           DateTime
  end             String
  school          String
  exp_id          Int
  expert          Expert   @relation(fields: [exp_id], references: [id])

  @@map("expert_degrees")
}

model ExpertService {
  id          Int    @id @default(autoincrement())
  title       String
  price       Int
  description String
  exp_id      Int
  expert      Expert @relation(fields: [exp_id], references: [id])

  @@map("expert_services")
}

model ExpertLanguage {
  id          Int                    @id @default(autoincrement())
  language    LanguagesOnExperts[]
  proficiency ProficiencyOnExperts[]
  exp_id      Int
  expert      Expert                 @relation(fields: [exp_id], references: [id])

  @@map("expert_languages")
}

model ExpertLocation {
  id          Int    @id @default(autoincrement())
  location    String
  coordinates String
  exp_id      Int    @unique
  expert      Expert @relation(fields: [exp_id], references: [id])

  @@map("expert_locations")
}

model ExpertPortfolio {
  id     Int    @id @default(autoincrement())
  image  String
  cite   String
  exp_id Int    @unique
  expert Expert @relation(fields: [exp_id], references: [id])

  @@map("expert_portfolios")
}

model ExpertSocialNetwork {
  id     Int    @id @default(autoincrement())
  name   String
  exp_id Int    @unique
  expert Expert @relation(fields: [exp_id], references: [id])

  @@map("expert_social_networks")
}

// TODO:  *** USER ***

model UserFavorites {
  profile_id Int      @unique
  exp_id     Int      @unique
  assignedAt DateTime @default(now())
  expert     Expert   @relation(fields: [exp_id], references: [id])
  profile    Profile  @relation(fields: [profile_id], references: [id])

  @@id([profile_id, exp_id])
}

model UserContacts {
  profile_id Int      @unique
  exp_id     Int      @unique
  assignedAt DateTime @default(now())
  expert     Expert   @relation(fields: [exp_id], references: [id])
  profile    Profile  @relation(fields: [profile_id], references: [id])

  @@id([profile_id, exp_id])
}

// TODO: *** SKILLS ***

model Skill {
  id     Int               @id @default(autoincrement())
  name   String
  expert SkillsOnExperts[]

  @@map("skills")
}

model SkillsOnExperts {
  skill_id   Int
  exp_id     Int
  assignedAt DateTime @default(now())
  skill      Skill    @relation(fields: [skill_id], references: [id])
  expert     Expert   @relation(fields: [exp_id], references: [id])

  @@id([skill_id, exp_id])
  @@map("skills_on_experts")
}

// TODO: *** EXPERIENCE ***
model Experience {
  id     Int                   @id @default(autoincrement())
  name   String
  expert ExperienceOnExperts[]

  @@map("experience")
}

model ExperienceOnExperts {
  experience_id Int
  exp_id        Int        @unique
  assignedAt    DateTime   @default(now())
  experience    Experience @relation(fields: [experience_id], references: [id])
  expert        Expert     @relation(fields: [exp_id], references: [id])

  @@id([experience_id, exp_id])
  @@map("experience_on_experts")
}

// TODO:  *** CATEGORIES ***

model CategoryDegrees {
  id     Int                         @id @default(autoincrement())
  name   String
  expert CategoriesDegreeOnExperts[]

  @@map("categories_degree")
}

model CategoriesDegreeOnExperts {
  category_id Int             @unique
  exp_id      Int             @unique
  assignedAt  DateTime        @default(now())
  category    CategoryDegrees @relation(fields: [category_id], references: [id])
  expert      Expert          @relation(fields: [exp_id], references: [id])

  @@id([category_id, exp_id])
  @@map("categories_degree_on_experts")
}

// TODO: *** LANGUAGE ***

model Languages {
  id              Int                  @id @default(autoincrement())
  name            String
  iso             String
  flag            String
  language_expert LanguagesOnExperts[]

  @@map("list_languages")
}

model LanguagesOnExperts {
  language_id        Int
  language_expert_id Int
  assignedAt         DateTime       @default(now())
  language           Languages      @relation(fields: [language_id], references: [id])
  language_expert    ExpertLanguage @relation(fields: [language_expert_id], references: [id])

  @@id([language_id, language_expert_id])
  @@map("language_on_experts")
}

model Proficiency {
  id              Int                    @id @default(autoincrement())
  name            String
  language_expert ProficiencyOnExperts[]

  @@map("proficiency_language")
}

model ProficiencyOnExperts {
  proficiency_id     Int
  language_expert_id Int
  assignedAt         DateTime       @default(now())
  proficiency        Proficiency    @relation(fields: [proficiency_id], references: [id])
  language_expert    ExpertLanguage @relation(fields: [language_expert_id], references: [id])

  @@id([proficiency_id, language_expert_id])
  @@map("proficiency_on_experts")
}

// TODO: *** WORK MODE ***

model WorkMode {
  id     Int                 @id @default(autoincrement())
  name   String
  expert WorkModeOnExperts[]

  @@map("work_mode")
}

model WorkModeOnExperts {
  work_mode_id Int
  expert_id    Int      @unique
  assignedAt   DateTime @default(now())
  work_mode    WorkMode @relation(fields: [work_mode_id], references: [id])
  expert       Expert   @relation(fields: [expert_id], references: [id])

  @@id([work_mode_id, expert_id])
  @@map("work_mode_on_experts")
}

// TODO: *** STATUS ***

model Status {
  id     Int               @id @default(autoincrement())
  name   String
  expert StatusOnExperts[]

  @@map("status")
}

model StatusOnExperts {
  status_id  Int
  exp_id     Int      @unique
  assignedAt DateTime @default(now())
  status     Status   @relation(fields: [status_id], references: [id])
  expert     Expert   @relation(fields: [exp_id], references: [id])

  @@id([status_id, exp_id])
  @@map("status_on_experts")
}

// TODO:  *** SOCIAL NETWORK ***

model SocialNetwork {
  id   Int    @id @default(autoincrement())
  name String

  @@map("social_networks")
}

enum Role {
  USER
  EXPERT
  ADMIN
}
